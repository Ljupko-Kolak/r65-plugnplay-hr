// Derived from the pre-packaged keymap_croatian.h found in /qmk_firmware/quantum/keymap_extras/

#pragma once
#include "keycodes.h"
// clang-format off

// Enables a US QWERTY keyboard to output US QWERTY characters when connected to a Croatian PC (set to HR QWERTZ layout).
// Maps key presses on a US QWERTY keyboard to keycodes or combos that produce the corresponding US QWERTY characters.



// Custom Keycode  |QMK Keycode             |Desired character (simulated keypress on a Croatian QWERTZ keyboard)

// Base Layer (Unshifted)
// Number Row
#define US2HR_GRV   KC_GRV                  // ` (`)
#define US2HR_1     KC_1                    // 1 (1)
#define US2HR_2     KC_2                    // 2 (2)
#define US2HR_3     KC_3                    // 3 (3)
#define US2HR_4     KC_4                    // 4 (4)
#define US2HR_5     KC_5                    // 5 (5)
#define US2HR_6     KC_6                    // 6 (6)
#define US2HR_7     KC_7                    // 7 (7)
#define US2HR_8     KC_8                    // 8 (8)
#define US2HR_9     KC_9                    // 9 (9)
#define US2HR_0     KC_0                    // 0 (0)
#define US2HR_MINS  KC_SLSH                 // - (/)
#define US2HR_EQL   S(KC_0)                 // = (Shift + 0)

// Row 1 (QWERTY row)
#define US2HR_Q     KC_Q                    // q (q)
#define US2HR_W     KC_W                    // w (w)
#define US2HR_E     KC_E                    // e (e)
#define US2HR_R     KC_R                    // r (r)
#define US2HR_T     KC_T                    // t (t)
#define US2HR_Y     KC_Z                    // y (z)
#define US2HR_U     KC_U                    // u (u)
#define US2HR_I     KC_I                    // i (i)
#define US2HR_O     KC_O                    // o (o)
#define US2HR_P     KC_P                    // p (p)
#define US2HR_LBRC  ALGR(KC_F)              // [ (Alt Gr + f)
#define US2HR_RBRC  ALGR(KC_G)              // ] (Alt Gr + g)
#define US2HR_BSLS  ALGR(KC_Q)              // \ (Alt Gr + q)

// Row 2 (ASDF row)
#define US2HR_A     KC_A                    // a (a)
#define US2HR_S     KC_S                    // s (s)
#define US2HR_D     KC_D                    // d (d)
#define US2HR_F     KC_F                    // f (f)
#define US2HR_G     KC_G                    // g (g)
#define US2HR_H     KC_H                    // h (h)
#define US2HR_J     KC_J                    // j (j)
#define US2HR_K     KC_K                    // k (k)
#define US2HR_L     KC_L                    // l (l)
#define US2HR_SCLN  S(KC_COMM)              // ; (Shift + ,)
#define US2HR_QUOT  KC_MINS                 // ' (-)

// Row 3 (ZXCV row)
#define US2HR_Z     KC_Y                    // z (y)
#define US2HR_X     KC_X                    // x (x)
#define US2HR_C     KC_C                    // c (c)
#define US2HR_V     KC_V                    // v (v)
#define US2HR_B     KC_B                    // b (b)
#define US2HR_N     KC_N                    // n (n)
#define US2HR_M     KC_M                    // m (m)
#define US2HR_COMM  KC_COMM                 // , (,)
#define US2HR_DOT   KC_DOT                  // . (.)
#define US2HR_SLSH  S(KC_7)                 // / (Shift + 7)

// Shifted Layer
// Number Row
#define US2HR_TILD  S(KC_GRV)               // ~ (Shift + `)
#define US2HR_EXLM  S(KC_1)                 // ! (Shift + 1)
#define US2HR_AT    ALGR(KC_V)              // @ (Alt Gr + v)
#define US2HR_HASH  S(KC_3)                 // # (Shift + 3)
#define US2HR_DLR   S(KC_4)                 // $ (Shift + 4)
#define US2HR_PERC  S(KC_5)                 // % (Shift + 5)
#define US2HR_CIRC  ALGR(KC_3)              // ^ (Alt Gr + 3)
#define US2HR_AMPR  S(KC_6)                 // & (Shift + 6)
#define US2HR_ASTR  S(KC_EQL)               // * (Shift + =)
#define US2HR_LPRN  S(KC_8)                 // ( (Shift + 8)
#define US2HR_RPRN  S(KC_9)                 // ) (Shift + 9)
#define US2HR_UNDS  S(KC_MINS)              // _ (Shift + ?)
#define US2HR_PLUS  KC_EQL                  // + (=)

// Row 1 (QWERTY row)
#define US2HR_Q_U   S(KC_Q)                 // Q (Shift + q)
#define US2HR_W_U   S(KC_W)                 // W (Shift + w)
#define US2HR_E_U   S(KC_E)                 // E (Shift + e)
#define US2HR_R_U   S(KC_R)                 // R (Shift + r)
#define US2HR_T_U   S(KC_T)                 // T (Shift + t)
#define US2HR_Y_U   S(KC_Z)                 // Y (Shift + z)
#define US2HR_U_U   S(KC_U)                 // U (Shift + u)
#define US2HR_I_U   S(KC_I)                 // I (Shift + i)
#define US2HR_O_U   S(KC_O)                 // O (Shift + o)
#define US2HR_P_U   S(KC_P)                 // P (Shift + p)
#define US2HR_LCBR  ALGR(KC_B)              // { (Alt Gr + b)
#define US2HR_RCBR  ALGR(KC_N)              // } (Alt Gr + n)
#define US2HR_PIPE  ALGR(KC_W)              // | (Alt Gr + w)

// Row 2 (ASDF row)
#define US2HR_A_U   S(KC_A)                 // A (Shift + a)
#define US2HR_S_U   S(KC_S)                 // S (Shift + s)
#define US2HR_D_U   S(KC_D)                 // D (Shift + d)
#define US2HR_F_U   S(KC_F)                 // F (Shift + f)
#define US2HR_G_U   S(KC_G)                 // G (Shift + g)
#define US2HR_H_U   S(KC_H)                 // H (Shift + h)
#define US2HR_J_U   S(KC_J)                 // J (Shift + j)
#define US2HR_K_U   S(KC_K)                 // K (Shift + k)
#define US2HR_L_U   S(KC_L)                 // L (Shift + l)
#define US2HR_COLN  S(KC_DOT)               // : (Shift + .)
#define US2HR_DQUO  S(KC_2)                 // " (Shift + 2)

// Row 3 (ZXCV row)
#define US2HR_Z_U   S(KC_Y)                 // Z (Shift + y)
#define US2HR_X_U   S(KC_X)                 // X (Shift + x)
#define US2HR_C_U   S(KC_C)                 // C (Shift + c)
#define US2HR_V_U   S(KC_V)                 // V (Shift + v)
#define US2HR_B_U   S(KC_B)                 // B (Shift + b)
#define US2HR_N_U   S(KC_N)                 // N (Shift + n)
#define US2HR_M_U   S(KC_M)                 // M (Shift + m)
#define US2HR_LABK  ALGR(KC_COMM)           // < (Alt Gr + ,)
#define US2HR_RABK  ALGR(KC_DOT)            // > (Alt Gr + .)
#define US2HR_QUES  S(KC_MINS)              // ? (Shift + -)
